from typing import List
import math
import functools
# import numpy as np



class Airport:
    def airport(self, houses: List[List[int]]) -> float:
        total_house = len(houses)
        if total_house <= 2:return 0.0
        sum_x,sum_y,pos = self.find_y_sumx_sum_y(houses)
        y_point = houses.pop(pos)
        def comparator(a,b):
            d1 = [a[0]-y_point[0],a[1]-y_point[1]]
            d2 = [b[0] - y_point[0], b[1] - y_point[1]]
            dir = d1[0] * d2[1] - d1[1] * d2[0]
            if dir > 0:return -1
            elif dir < 0: return 1
            else:
                if a[0] > b[0] and a[1] > b[1]:return 1
                elif a[0] == b[0] and a[1] > b[1]:return 1
                elif a[0] < b[0] and a[1]> b[1]: return 1
                elif a[0] < b[0] and a[1] == b[1]: return 1
                else : return -1
        sorted_houses = sorted(houses, key=functools.cmp_to_key(comparator))
        sorted_houses.insert(0,y_point)
        convex_hull = self.find_convex_hull(sorted_houses)
        init_distance = float("inf")
        for num in range(len(convex_hull)):
            edge = [convex_hull[num][0] - convex_hull[ num-1][0],convex_hull[num][1] - convex_hull[ num-1][1]]
            x = sum_x-total_house*convex_hull[num-1][0]
            y=  sum_y-total_house*convex_hull[num-1][1]
            distance =( abs(x*edge[1]-y*edge[0]) ) / math.sqrt(edge[0]**2 + edge[1] ** 2)
            if distance < init_distance:
                init_distance = distance
        return init_distance/total_house

    def find_y_sumx_sum_y(self,houses):
        init_house = houses[0]
        sum_x ,sum_y = 0,0
        ans = 0
        for num,house in enumerate(houses):
            if house[1] <=init_house[1]:
                if house[1] == init_house[1] and house[0] > init_house[0]:
                    init_house = house
                    ans = num
                elif house[1] < init_house[1] :
                    init_house = house
                    ans = num
            sum_x +=house[0]
            sum_y +=house[1]

        return sum_x,sum_y,ans

    def ccw(self,p_cornor,p2,p3):
        fir = [p2[0]-p_cornor[0],p2[1]-p_cornor[1]]
        sec =[p3[0]-p_cornor[0],p3[1]-p_cornor[1]]
        return  fir[0]*sec[1] - fir[1] * sec[0]
    def find_convex_hull(self,sorted_houses):
        stack = [sorted_houses[0],sorted_houses[1]]
        for house in sorted_houses[2:]:
            dir = self.ccw(stack[-2],stack[-1],house)
            while len(stack) > 0 and dir < 0:
                stack.pop(-1)
                dir = self.ccw(stack[-2],stack[-1],house)
            if dir == 0:
                stack.pop(-1)
            stack.append(house)
        return stack

if __name__ == "__main__":
    print(Airport().airport([[0, 0], [1, 1],[2,2]]))
    # print(Airport().airport([[0,0],[1,0]]))
    # """
    # 0.0
    # """
    # print(Airport().airport([[0,0],[1,0],[0,1]]))
    # """
    # *.
    # **
    # # Convex: [[0, 0], [1, 0], [0, 1]]
    # 0.2357022603955159
    # """
    # print(Airport().airport([[0,0],[2,0],[0,2],[1,1],[2,2]]))
    # """
    # *.*
    # .*.
    # *.*
    # # Convex: [[0, 0], [2, 0], [2, 2], [0, 2]]
    # 1.0
    # """
    # print(Airport().airport([[1,1],[2,2],[0,2],[2,0],[2,4],[3,3],[4,2],[4,1],[4,0]]))
    # """
    # ..*..
    # ...*.
    # *.*.*
    # .*..*
    # ..*.*
    # # Convex: [[0, 2], [2, 0], [4, 0], [4, 2], [2, 4]]
    # 1.3356461422412562
    # """

# from scipy.spatial import ConvexHull, convex_hull_plot_2d
# points = [[53, 61], [87, 27], [85, 94], [3, 8], [63, 7], [100, 78], [39, 99], [15, 30], [67, 10], [25, 42], [31, 1], [70, 3], [74, 12], [46, 69], [2, 2], [41, 63], [94, 20], [25, 86], [30, 8], [95, 8], [1, 54], [71, 99], [70, 64], [81, 15], [86, 49], [45, 5], [73, 99], [32, 96], [91, 64], [64, 67], [52, 24], [89, 65], [80, 69], [47, 74], [1, 32], [81, 51], [37, 91], [99, 81], [42, 2], [61, 35], [88, 87], [42, 87], [1, 25], [70, 4], [84, 69], [60, 96], [28, 10], [8, 92], [20, 44], [35, 62], [5, 79], [27, 38], [14, 4], [44, 4], [67, 59], [95, 30], [43, 72], [92, 70], [16, 39], [20, 28], [58, 2], [92, 44], [6, 19], [68, 37], [21, 90], [15, 49], [90, 54], [30, 3], [29, 35], [63, 19], [6, 64], [73, 83], [89, 53], [23, 66], [18, 44], [80, 38], [51, 70], [10, 89], [4, 45], [31, 52], [64, 82], [30, 63], [54, 31], [69, 46], [42, 51], [65, 21], [17, 69], [37, 35], [17, 94], [51, 78], [77, 37], [87, 46], [80, 72], [64, 74], [34, 63], [42, 74], [57, 86], [41, 3], [26, 79], [8, 84]]   # 30 random points in 2-D
# print(Airport().airport([[53, 61], [87, 27], [85, 94], [3, 8], [63, 7], [100, 78], [39, 99], [15, 30], [67, 10], [25, 42], [31, 1], [70, 3], [74, 12], [46, 69], [2, 2], [41, 63], [94, 20], [25, 86], [30, 8], [95, 8], [1, 54], [71, 99], [70, 64], [81, 15], [86, 49], [45, 5], [73, 99], [32, 96], [91, 64], [64, 67], [52, 24], [89, 65], [80, 69], [47, 74], [1, 32], [81, 51], [37, 91], [99, 81], [42, 2], [61, 35], [88, 87], [42, 87], [1, 25], [70, 4], [84, 69], [60, 96], [28, 10], [8, 92], [20, 44], [35, 62], [5, 79], [27, 38], [14, 4], [44, 4], [67, 59], [95, 30], [43, 72], [92, 70], [16, 39], [20, 28], [58, 2], [92, 44], [6, 19], [68, 37], [21, 90], [15, 49], [90, 54], [30, 3], [29, 35], [63, 19], [6, 64], [73, 83], [89, 53], [23, 66], [18, 44], [80, 38], [51, 70], [10, 89], [4, 45], [31, 52], [64, 82], [30, 63], [54, 31], [69, 46], [42, 51], [65, 21], [17, 69], [37, 35], [17, 94], [51, 78], [77, 37], [87, 46], [80, 72], [64, 74], [34, 63], [42, 74], [57, 86], [41, 3], [26, 79], [8, 84]] ))
# points =[[53, 61], [87, 27], [85, 94], [3, 8], [63, 7], [100, 78], [39, 99], [15, 30], [67, 10], [25, 42], [31, 1], [70, 3], [74, 12], [46, 69], [2, 2], [41, 63], [94, 20], [25, 86], [30, 8], [95, 8], [1, 54], [71, 99], [70, 64], [81, 15], [86, 49], [45, 5], [73, 99], [32, 96], [91, 64], [64, 67], [52, 24], [89, 65], [80, 69], [47, 74], [1, 32], [81, 51], [37, 91], [99, 81], [42, 2], [61, 35], [88, 87], [42, 87], [1, 25], [70, 4], [84, 69], [60, 96], [28, 10], [8, 92], [20, 44], [35, 62], [5, 79], [27, 38], [14, 4], [44, 4], [67, 59], [95, 30], [43, 72], [92, 70], [16, 39], [20, 28], [58, 2], [92, 44], [6, 19], [68, 37], [21, 90], [15, 49], [90, 54], [30, 3], [29, 35], [63, 19], [6, 64], [73, 83], [89, 53], [23, 66], [18, 44], [80, 38], [51, 70], [10, 89], [4, 45], [31, 52], [64, 82], [30, 63], [54, 31], [69, 46], [42, 51], [65, 21], [17, 69], [37, 35], [17, 94], [51, 78], [77, 37], [87, 46], [80, 72], [64, 74], [34, 63], [42, 74], [57, 86], [41, 3], [26, 79], [8, 84]]

# points = [[31, 1], [58, 2], [70, 3], [95, 8], [100, 78], [99, 81], [85, 94], [73, 99], [39, 99], [8, 92], [5, 79], [1, 54], [1, 25], [2, 2]]
# points = np.array(points)
# points.reshape((2,len(points)))
# hull= ConvexHull(points)
#
# points = [[53, 61], [87, 27], [85, 94], [3, 8], [63, 7], [100, 78], [39, 99], [15, 30], [67, 10], [25, 42], [31, 1], [70, 3], [74, 12], [46, 69], [2, 2], [41, 63], [94, 20], [25, 86], [30, 8], [95, 8], [1, 54], [71, 99], [70, 64], [81, 15], [86, 49], [45, 5], [73, 99], [32, 96], [91, 64], [64, 67], [52, 24], [89, 65], [80, 69], [47, 74], [1, 32], [81, 51], [37, 91], [99, 81], [42, 2], [61, 35], [88, 87], [42, 87], [1, 25], [70, 4], [84, 69], [60, 96], [28, 10], [8, 92], [20, 44], [35, 62], [5, 79], [27, 38], [14, 4], [44, 4], [67, 59], [95, 30], [43, 72], [92, 70], [16, 39], [20, 28], [58, 2], [92, 44], [6, 19], [68, 37], [21, 90], [15, 49], [90, 54], [30, 3], [29, 35], [63, 19], [6, 64], [73, 83], [89, 53], [23, 66], [18, 44], [80, 38], [51, 70], [10, 89], [4, 45], [31, 52], [64, 82], [30, 63], [54, 31], [69, 46], [42, 51], [65, 21], [17, 69], [37, 35], [17, 94], [51, 78], [77, 37], [87, 46], [80, 72], [64, 74], [34, 63], [42, 74], [57, 86], [41, 3], [26, 79], [8, 84]]   # 30 random points in 2-D
# points = np.array(points)
# points.reshape((2,len(points)))
# hull= ConvexHull(points)
# import matplotlib.pyplot as plt
# plt.plot(points[:,0], points[:,1], 'o')
# for simplex in hull.simplices:
#     plt.plot(points[simplex, 0], points[simplex, 1], 'k-')
#
# plt.plot(points[hull.vertices, 0], points[hull.vertices, 1], 'r--', lw=2)
# plt.plot(points[hull.vertices[0], 0], points[hull.vertices[0], 1], 'ro')
# plt.show()




